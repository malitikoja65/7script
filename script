-- Modern Roblox Script with Highlight, Fly, Walkspeed, Teleport, Auto Farm and GUI
-- System kluczy z zewnętrzną stroną zarządzania

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local LocalizationService = game:GetService("LocalizationService")

local player = Players.LocalPlayer
local character = nil
local humanoid = nil
local camera = workspace.CurrentCamera

-- Konfiguracja Key System
local KEY_API_URL = "https://bettercode.space/pl/keys_api.json" -- <--- Twoja strona!
-- ALTERNATYWNIE: "https://raw.githubusercontent.com/USERNAME/REPO/main/keys_api.json"
-- LUB: "https://pastebin.com/raw/TWOJ_PASTE_ID"
local USE_LOCAL_KEYS = false -- Zmień na true dla testów lokalnych (klucz: TEST-KEY1-DEMO-ABCD)
local isAuthorized = false
local currentUser = """

-- Konfiguracja Gry
local JUNKYARD_CONTAINER_NAME = "Vehicles"

-- === TELEPORT CONFIGURATION ===
local TELEPORT_LOCATIONS = {
    ["Junkyard"] = CFrame.new(0, 50, 0),
    ["PitWheel"] = CFrame.new(500, 50, 500),
    ["Part Shop"] = CFrame.new(-250, 50, 250),
    ["Paint Shop"] = CFrame.new(-500, 50, -500),
    ["Sell"] = CFrame.new(200, 50, -200)
}

-- Configuration
local config = {
    highlight = {
        enabled = false,
        color = Color3.fromRGB(0, 255, 255),
        transparency = 0.5
    },
    fly = {
        enabled = false,
        speed = 50
    },
    walkspeed = {
        enabled = false,
        speed = 16
    },
    junkyardESP = {
        enabled = false,
        color = Color3.fromRGB(255, 100, 0),
        transparency = 0.5
    },
    autoFarm = {
        enabled = false,
        targetKM = 100
    },
    menuKey = Enum.KeyCode.RightControl
}

-- Variables
local highlightObjects = {}
local flyConnection = nil
local flying = false
local flySpeed = config.fly.speed
local isChangingKeybind = false
local keybindButton = nil 
local espHighlights = {} 
local autoFarmConnection = nil
local currentVehicle = nil

local KeyGui = nil
local TitleText = nil 
local ContentContainer = nil 

-- UI Toggle States
local toggleStates = {}

-- KLUCZOWA POPRAWKA: Inicjalizacja MainGui na początku.
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "ModernScriptGUI"
ScreenGui.ResetOnSpawn = false
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.Enabled = false 
local MainGui = ScreenGui 

-- === KEY VALIDATION SYSTEM ===
local validKeys = {}
local keysLoaded = false

-- TESTOWE KLUCZE - Usuń po skonfigurowaniu API
local function loadLocalKeys()
    validKeys = {
        ["TEST-KEY1-DEMO-ABCD"] = {
            username = "TestUser",
            createdAt = "2025-01-01T00:00:00.000Z",
            expiresAt = "2099-12-31T23:59:59.000Z",
            uses = 0
        }
    }
    keysLoaded = true
    print("✅ Załadowano lokalne klucze testowe")
    return true
end

local function loadKeysFromAPI()
    print("🔄 Ładowanie kluczy z API...")
    print("📍 URL: " .. KEY_API_URL)
    
    -- Sprawdź czy HttpService jest włączony
    local httpEnabled = pcall(function()
        game:GetService("HttpService"):GetAsync("https://www.google.com")
    end)
    
    if not httpEnabled then
        warn("❌ HttpService jest wyłączony!")
        warn("Włącz HttpEnabled w Game Settings > Security")
        return false
    end
    
    local success, result = pcall(function()
        return game:GetService("HttpService"):GetAsync(KEY_API_URL, true)
    end)
    
    if success and result then
        print("📦 Odpowiedź z API otrzymana (długość: " .. #result .. " znaków)")
        
        -- Sprawdź czy to nie jest HTML (błąd 404)
        if result:match("<!DOCTYPE") or result:match("<html") then
            warn("❌ Otrzymano HTML zamiast JSON - sprawdź URL!")
            warn("Możliwe że plik nie istnieje lub URL jest niepoprawny")
            return false
        end
        
        local decodeSuccess, decodedKeys = pcall(function()
            return game:GetService("HttpService"):JSONDecode(result)
        end)
        
        if decodeSuccess and decodedKeys then
            validKeys = decodedKeys
            keysLoaded = true
            
            -- Policz klucze
            local keyCount = 0
            for _ in pairs(validKeys) do
                keyCount = keyCount + 1
            end
            
            print("✅ Klucze załadowane pomyślnie! Znaleziono " .. keyCount .. " kluczy")
            return true
        else
            warn("❌ Błąd dekodowania JSON: " .. tostring(decodedKeys))
            warn("Sprawdź czy plik JSON ma poprawny format")
            return false
        end
    else
        warn("❌ Błąd pobierania kluczy z API: " .. tostring(result))
        warn("Sprawdź:")
        warn("1. Czy URL jest poprawny")
        warn("2. Czy plik istnieje na serwerze")
        warn("3. Czy HttpService jest włączony")
        return false
    end
end

local function validateKey(key)
    if not keysLoaded then
        return false, "Klucze nie zostały załadowane"
    end
    
    local keyData = validKeys[key]
    
    if not keyData then
        return false, "Klucz nie istnieje"
    end
    
    -- Parsowanie daty wygaśnięcia
    local expiresAt = keyData.expiresAt
    local year, month, day = expiresAt:match("(%d+)-(%d+)-(%d+)")
    
    if not year then
        return false, "Błąd formatu daty"
    end
    
    local expireDate = os.time({year=tonumber(year), month=tonumber(month), day=tonumber(day), hour=23, min=59, sec=59})
    local currentDate = os.time()
    
    if expireDate < currentDate then
        return false, "Klucz wygasł"
    end
    
    -- Zwiększ licznik użyć (lokalnie)
    keyData.uses = keyData.uses + 1
    
    return true, keyData
end

-- Załaduj klucze przy starcie
spawn(function()
    wait(1)
    
    if USE_LOCAL_KEYS then
        print("⚠️ Używam lokalnych kluczy testowych")
        loadLocalKeys()
    else
        local success = loadKeysFromAPI()
        
        if not success then
            warn("⚠️ Nie udało się załadować kluczy z API!")
            warn("Przełączam na lokalne klucze testowe...")
            loadLocalKeys()
        end
    end
end)

-- === AUTO FARM LOGIC ===
local function findPlayerVehicle()
    local vehiclesFolder = workspace:FindFirstChild("Vehicles")
    if not vehiclesFolder then return nil end
    
    for _, vehicle in pairs(vehiclesFolder:GetChildren()) do
        if vehicle:IsA("Model") then
            -- Metoda 1: Sprawdź ObjectValue/StringValue z nazwą gracza
            local ownerValue = vehicle:FindFirstChild("VehicleOwner") or vehicle:FindFirstChild("Owner")
            if ownerValue and (ownerValue:IsA("ObjectValue") or ownerValue:IsA("StringValue")) then
                if ownerValue.Value == player or ownerValue.Value == player.Name then
                    return vehicle
                end
            end
            
            -- Metoda 2: Sprawdź atrybut Owner
            local ownerAttr = vehicle:GetAttribute("Owner")
            if ownerAttr == player.Name or ownerAttr == player.UserId then
                return vehicle
            end
            
            -- Metoda 3: Sprawdź czy gracz siedzi w VehicleSeat
            for _, child in pairs(vehicle:GetDescendants()) do
                if child:IsA("VehicleSeat") and child.Occupant then
                    if child.Occupant.Parent == character then
                        return vehicle
                    end
                end
            end
        end
    end
    return nil
end

local function getVehicleSeat(vehicle)
    if not vehicle then return nil end
    
    -- Szukaj VehicleSeat w całym modelu
    for _, child in pairs(vehicle:GetDescendants()) do
        if child:IsA("VehicleSeat") then
            return child
        end
    end
    
    -- Fallback: szukaj Seat
    return vehicle:FindFirstChild("Seat") or vehicle:FindFirstChild("DriveSeat")
end

local function startAutoFarm()
    if autoFarmConnection then return end
    
    autoFarmConnection = RunService.Heartbeat:Connect(function()
        if not config.autoFarm.enabled then return end
        
        currentVehicle = findPlayerVehicle()
        if not currentVehicle then return end
        
        local vehicleSeat = getVehicleSeat(currentVehicle)
        if not vehicleSeat then return end
        
        local primaryPart = currentVehicle.PrimaryPart or vehicleSeat
        if not primaryPart then return end
        
        -- Sprawdź czy gracz siedzi w pojeździe
        if vehicleSeat.Occupant ~= humanoid then
            -- Teleportuj gracza do pojazdu i posadź
            if character and character:FindFirstChild("HumanoidRootPart") then
                character.HumanoidRootPart.CFrame = vehicleSeat.CFrame + Vector3.new(0, 2, 0)
                wait(0.1)
                vehicleSeat:Sit(humanoid)
            end
        end
        
        -- Sprawdź aktualny kilometraż
        local currentKM = currentVehicle:GetAttribute("Mileage") or currentVehicle:GetAttribute("Odometer") or 0
        
        if currentKM < config.autoFarm.targetKM then
            -- Poruszanie pojazdem po powierzchni
            local rayOrigin = primaryPart.Position
            local rayDirection = Vector3.new(0, -10, 0)
            
            local raycastParams = RaycastParams.new()
            raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
            raycastParams.FilterDescendantsInstances = {currentVehicle, character}
            
            local rayResult = workspace:Raycast(rayOrigin, rayDirection, raycastParams)
            
            if rayResult then
                -- Poruszanie się po powierzchni
                local forwardVector = primaryPart.CFrame.LookVector
                local targetPosition = primaryPart.Position + (forwardVector * 50)
                targetPosition = Vector3.new(targetPosition.X, rayResult.Position.Y + 3, targetPosition.Z)
                
                -- Płynne poruszanie
                local moveSpeed = 0.5
                local newCFrame = CFrame.new(
                    primaryPart.Position:Lerp(targetPosition, moveSpeed),
                    targetPosition
                )
                
                primaryPart.CFrame = newCFrame
                
                -- Symulacja naciskania W
                if vehicleSeat:IsA("VehicleSeat") then
                    vehicleSeat.ThrottleFloat = 1
                    vehicleSeat.SteerFloat = math.sin(tick()) * 0.3 -- Lekkie skręcanie
                end
            end
        end
    end)
end

local function stopAutoFarm()
    if autoFarmConnection then
        autoFarmConnection:Disconnect()
        autoFarmConnection = nil
    end
    
    if currentVehicle then
        local vehicleSeat = getVehicleSeat(currentVehicle)
        if vehicleSeat and vehicleSeat:IsA("VehicleSeat") then
            vehicleSeat.ThrottleFloat = 0
            vehicleSeat.SteerFloat = 0
        end
    end
end

-- === LOGIKA FLY / CHARAKTER RE-AKTYWACJA ===
local function enableFly(enabled)
    config.fly.enabled = enabled
    flying = enabled
    
    local hrp = character and character:FindFirstChild("HumanoidRootPart")

    if flyConnection then
        flyConnection:Disconnect()
        flyConnection = nil
    end
    if hrp and hrp:FindFirstChild("FlyVelocity") then hrp.FlyVelocity:Destroy() end
    if hrp and hrp:FindFirstChild("FlyGyro") then hrp.FlyGyro:Destroy() end

    if enabled and hrp then
        local bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.MaxForce = Vector3.new(9e9, 9e9, 9e9)
        bodyVelocity.Velocity = Vector3.new(0, 0, 0)
        bodyVelocity.Name = "FlyVelocity"
        bodyVelocity.Parent = hrp
        
        local bodyGyro = Instance.new("BodyGyro")
        bodyGyro.MaxTorque = Vector3.new(9e9, 9e9, 9e9)
        bodyGyro.P = 9e9
        bodyGyro.Name = "FlyGyro"
        bodyGyro.Parent = hrp
        
        flyConnection = RunService.RenderStepped:Connect(function()
            if flying and hrp then
                local currentCamera = workspace.CurrentCamera
                local moveDirection = Vector3.new()
                
                hrp.AssemblyLinearVelocity = Vector3.new(0,0,0)
                hrp.AssemblyAngularVelocity = Vector3.new(0,0,0)
                
                if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                    moveDirection = moveDirection + currentCamera.CFrame.LookVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                    moveDirection = moveDirection - currentCamera.CFrame.LookVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                    moveDirection = moveDirection - currentCamera.CFrame.RightVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                    moveDirection = moveDirection + currentCamera.CFrame.RightVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                    moveDirection = moveDirection + Vector3.new(0, 1, 0)
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
                    moveDirection = moveDirection - Vector3.new(0, 1, 0)
                end
                
                bodyVelocity.Velocity = moveDirection.Unit * flySpeed
                bodyGyro.CFrame = currentCamera.CFrame
                
                humanoid.Sit = true 
            end
        end)
    else
        if flyConnection then
            flyConnection:Disconnect()
            flyConnection = nil
        end
        if humanoid then humanoid.Sit = false end 
    end
end

local function setupCharacter(char)
    character = char
    humanoid = char:WaitForChild("Humanoid")
    
    if config.walkspeed.enabled then
        humanoid.WalkSpeed = config.walkspeed.speed
    else
        humanoid.WalkSpeed = 16
    end
    
    if config.fly.enabled then
        enableFly(true)
    end
end

player.CharacterAdded:Connect(setupCharacter)

if player.Character then
    setupCharacter(player.Character)
end

-- === KEY SYSTEM GUI SETUP ===
local function createKeyInputGUI()
    KeyGui = Instance.new("ScreenGui")
    KeyGui.Name = "KeyInputGUI"
    KeyGui.ResetOnSpawn = false
    KeyGui.ZIndexBehavior = Enum.ZIndexBehavior.Global 
    KeyGui.Parent = game:GetService("CoreGui")

    local KeyFrame = Instance.new("Frame")
    KeyFrame.Name = "KeyFrame"
    KeyFrame.Size = UDim2.new(0, 350, 0, 200)
    KeyFrame.Position = UDim2.new(0.5, -175, 0.5, -100)
    KeyFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
    KeyFrame.BorderSizePixel = 0
    KeyFrame.Parent = KeyGui
    
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 12)
    Corner.Parent = KeyFrame
    
    local Title = Instance.new("TextLabel")
    Title.Size = UDim2.new(1, 0, 0, 50)
    Title.BackgroundColor3 = Color3.fromRGB(35, 35, 50)
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.Text = "🔑 Modern Script Hub"
    Title.TextSize = 18
    Title.Font = Enum.Font.GothamBold
    Title.Parent = KeyFrame
    
    local TitleCorner = Instance.new("UICorner")
    TitleCorner.CornerRadius = UDim.new(0, 12)
    TitleCorner.Parent = Title
    
    local TitleFix = Instance.new("Frame")
    TitleFix.Size = UDim2.new(1, 0, 0, 12)
    TitleFix.Position = UDim2.new(0, 0, 1, -12)
    TitleFix.BackgroundColor3 = Color3.fromRGB(35, 35, 50)
    TitleFix.BorderSizePixel = 0
    TitleFix.Parent = Title

    local KeyBox = Instance.new("TextBox")
    KeyBox.Name = "KeyBox"
    KeyBox.Size = UDim2.new(1, -40, 0, 40)
    KeyBox.Position = UDim2.new(0, 20, 0, 70)
    KeyBox.BackgroundColor3 = Color3.fromRGB(45, 45, 60)
    KeyBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    KeyBox.PlaceholderText = "Wpisz klucz..."
    KeyBox.TextSize = 14
    KeyBox.Font = Enum.Font.Gotham
    KeyBox.TextEditable = true
    KeyBox.ClearTextOnFocus = false
    KeyBox.Parent = KeyFrame
    
    local InputCorner = Instance.new("UICorner")
    InputCorner.CornerRadius = UDim.new(0, 8)
    InputCorner.Parent = KeyBox

    local SubmitButton = Instance.new("TextButton")
    SubmitButton.Size = UDim2.new(1, -40, 0, 40)
    SubmitButton.Position = UDim2.new(0, 20, 0, 120)
    SubmitButton.BackgroundColor3 = Color3.fromRGB(50, 120, 255)
    SubmitButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    SubmitButton.Text = "Autoryzuj"
    SubmitButton.TextSize = 16
    SubmitButton.Font = Enum.Font.GothamBold
    SubmitButton.Parent = KeyFrame
    
    local ButtonCorner = Instance.new("UICorner")
    ButtonCorner.CornerRadius = UDim.new(0, 8)
    ButtonCorner.Parent = SubmitButton
    
    local StatusLabel = Instance.new("TextLabel")
    StatusLabel.Name = "StatusLabel"
    StatusLabel.Size = UDim2.new(1, 0, 0, 25)
    StatusLabel.Position = UDim2.new(0, 0, 1, -30)
    StatusLabel.BackgroundTransparency = 1
    StatusLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    StatusLabel.Text = "Ładowanie kluczy z API..."
    StatusLabel.TextSize = 12
    StatusLabel.Font = Enum.Font.Gotham
    StatusLabel.Parent = KeyFrame
    
    -- Czekaj na załadowanie kluczy
    spawn(function()
        local attempts = 0
        while not keysLoaded and attempts < 10 do
            wait(0.5)
            attempts = attempts + 1
        end
        
        if keysLoaded then
            StatusLabel.Text = "Wprowadź klucz dostępu"
            StatusLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
        else
            StatusLabel.Text = "❌ Błąd ładowania API! Sprawdź URL"
            StatusLabel.TextColor3 = Color3.fromRGB(255, 50, 50)
        end
    end)

    local function checkKey(key)
        local isValid, result = validateKey(key)
        
        if isValid then
            isAuthorized = true
            currentUser = result.username
            StatusLabel.Text = "✅ Klucz poprawny! Ładowanie..."
            StatusLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
            
            wait(0.5)
            KeyGui:Destroy()
            
            if MainGui then MainGui.Enabled = true end 
            if TitleText then 
                TitleText.Text = "Modern Script Hub - " .. currentUser
            end 
            
            print("Modern Script Hub loaded successfully!")
            print("User: " .. currentUser)
            print("Menu Key: " .. config.menuKey.Name)
        else
            StatusLabel.Text = "❌ " .. result
            StatusLabel.TextColor3 = Color3.fromRGB(255, 50, 50)
            wait(2)
            StatusLabel.Text = "Wprowadź klucz dostępu"
            StatusLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
            KeyBox.Text = ""
        end
    end

    SubmitButton.MouseButton1Click:Connect(function()
        checkKey(KeyBox.Text)
    end)
    
    KeyBox.FocusLost:Connect(function(enterPressed)
        if enterPressed then
            checkKey(KeyBox.Text)
        end
    end)
end

-- === GŁÓWNY GUI SETUP ===
local MainFrame = Instance.new("Frame")
MainFrame.Name = "MainFrame"
MainFrame.Size = UDim2.new(0, 450, 0, 350)
MainFrame.Position = UDim2.new(0.5, -225, 0.5, -175)
MainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 35)
MainFrame.BorderSizePixel = 0
MainFrame.Active = true
MainFrame.Draggable = true
MainFrame.Parent = ScreenGui

local MainCorner = Instance.new("UICorner")
MainCorner.CornerRadius = UDim.new(0, 12)
MainCorner.Parent = MainFrame

local TitleBar = Instance.new("Frame")
TitleBar.Name = "TitleBar"
TitleBar.Size = UDim2.new(1, 0, 0, 45)
TitleBar.BackgroundColor3 = Color3.fromRGB(35, 35, 50)
TitleBar.BorderSizePixel = 0
TitleBar.Parent = MainFrame

local TitleCorner = Instance.new("UICorner")
TitleCorner.CornerRadius = UDim.new(0, 12)
TitleCorner.Parent = TitleBar

local TitleFix = Instance.new("Frame")
TitleFix.Size = UDim2.new(1, 0, 0, 12)
TitleFix.Position = UDim2.new(0, 0, 1, -12)
TitleFix.BackgroundColor3 = Color3.fromRGB(35, 35, 50)
TitleFix.BorderSizePixel = 0
TitleFix.Parent = TitleBar

TitleText = Instance.new("TextLabel") 
TitleText.Size = UDim2.new(1, -20, 1, 0)
TitleText.Position = UDim2.new(0, 20, 0, 0)
TitleText.BackgroundTransparency = 1
TitleText.Text = "Oczekiwanie na Autoryzację..." 
TitleText.TextColor3 = Color3.fromRGB(255, 255, 255)
TitleText.TextSize = 18
TitleText.Font = Enum.Font.GothamBold
TitleText.TextXAlignment = Enum.TextXAlignment.Left
TitleText.Parent = TitleBar

local CloseButton = Instance.new("TextButton")
CloseButton.Size = UDim2.new(0, 35, 0, 35)
CloseButton.Position = UDim2.new(1, -40, 0, 5)
CloseButton.BackgroundColor3 = Color3.fromRGB(45, 45, 60)
CloseButton.Text = "X"
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.TextSize = 16
CloseButton.Font = Enum.Font.GothamBold
CloseButton.Parent = TitleBar

local CloseCorner = Instance.new("UICorner")
CloseCorner.CornerRadius = UDim.new(0, 8)
CloseCorner.Parent = CloseButton

local TabContainer = Instance.new("Frame")
TabContainer.Name = "TabContainer"
TabContainer.Size = UDim2.new(0, 120, 1, -55)
TabContainer.Position = UDim2.new(0, 10, 0, 50)
TabContainer.BackgroundTransparency = 1
TabContainer.Parent = MainFrame

ContentContainer = Instance.new("Frame")
ContentContainer.Name = "ContentContainer"
ContentContainer.Size = UDim2.new(1, -140, 1, -55)
ContentContainer.Position = UDim2.new(0, 130, 0, 50)
ContentContainer.BackgroundColor3 = Color3.fromRGB(30, 30, 42)
ContentContainer.BorderSizePixel = 0
ContentContainer.Parent = MainFrame

local ContentCorner = Instance.new("UICorner")
ContentCorner.CornerRadius = UDim.new(0, 10)
ContentCorner.Parent = ContentContainer

local tabs = {}
local currentTab = nil

local function createTab(name, order)
    local tab = {}
    
    local TabButton = Instance.new("TextButton")
    TabButton.Size = UDim2.new(1, 0, 0, 40)
    TabButton.Position = UDim2.new(0, 0, 0, (order - 1) * 45)
    TabButton.BackgroundColor3 = Color3.fromRGB(35, 35, 50)
    TabButton.Text = name
    TabButton.TextColor3 = Color3.fromRGB(200, 200, 200)
    TabButton.TextSize = 14
    TabButton.Font = Enum.Font.GothamMedium
    TabButton.Parent = TabContainer
    
    local TabCorner = Instance.new("UICorner")
    TabCorner.CornerRadius = UDim.new(0, 8)
    TabCorner.Parent = TabButton
    
    local TabContent = Instance.new("ScrollingFrame")
    TabContent.Name = name .. "Content"
    TabContent.Size = UDim2.new(1, -20, 1, -20)
    TabContent.Position = UDim2.new(0, 10, 0, 10)
    TabContent.BackgroundTransparency = 1
    TabContent.ScrollBarThickness = 4
    TabContent.ScrollBarImageColor3 = Color3.fromRGB(60, 60, 80)
    TabContent.Visible = false
    TabContent.BorderSizePixel = 0
    TabContent.Parent = ContentContainer
    
    local ContentLayout = Instance.new("UIListLayout")
    ContentLayout.Padding = UDim.new(0, 10)
    ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    ContentLayout.Parent = TabContent
    
    tab.button = TabButton
    tab.content = TabContent
    tab.name = name
    
    TabButton.MouseButton1Click:Connect(function()
        for _, t in pairs(tabs) do
            t.content.Visible = false
            t.button.BackgroundColor3 = Color3.fromRGB(35, 35, 50)
            t.button.TextColor3 = Color3.fromRGB(200, 200, 200)
        end
        TabContent.Visible = true
        TabButton.BackgroundColor3 = Color3.fromRGB(50, 120, 255)
        TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        currentTab = tab
    end)
    
    return tab
end

-- Helper functions for UI elements
local function createLabel(parent, text, order)
    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(1, 0, 0, 25)
    Label.BackgroundTransparency = 1
    Label.Text = text
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextSize = 14
    Label.Font = Enum.Font.GothamMedium
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.LayoutOrder = order
    Label.Parent = parent
    return Label
end

local function createToggle(parent, text, order, callback, toggleId)
    local Container = Instance.new("Frame")
    Container.Size = UDim2.new(1, 0, 0, 35)
    Container.BackgroundColor3 = Color3.fromRGB(40, 40, 55)
    Container.LayoutOrder = order
    Container.Parent = parent
    
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 8)
    Corner.Parent = Container
    
    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(1, -60, 1, 0)
    Label.Position = UDim2.new(0, 10, 0, 0)
    Label.BackgroundTransparency = 1
    Label.Text = text
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextSize = 13
    Label.Font = Enum.Font.Gotham
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = Container
    
    local ToggleButton = Instance.new("TextButton")
    ToggleButton.Size = UDim2.new(0, 45, 0, 20)
    ToggleButton.Position = UDim2.new(1, -50, 0.5, -10)
    ToggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 75)
    ToggleButton.Text = ""
    ToggleButton.Parent = Container
    
    local ToggleCorner = Instance.new("UICorner")
    ToggleCorner.CornerRadius = UDim.new(1, 0)
    ToggleCorner.Parent = ToggleButton
    
    local ToggleCircle = Instance.new("Frame")
    ToggleCircle.Size = UDim2.new(0, 16, 0, 16)
    ToggleCircle.Position = UDim2.new(0, 2, 0.5, -8)
    ToggleCircle.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
    ToggleCircle.Parent = ToggleButton
    
    local CircleCorner = Instance.new("UICorner")
    CircleCorner.CornerRadius = UDim.new(1, 0)
    CircleCorner.Parent = ToggleCircle
    
    if toggleId then
        toggleStates[toggleId] = false
    end
    
    ToggleButton.MouseButton1Click:Connect(function()
        if not isAuthorized then return end
        
        local newState = not (toggleId and toggleStates[toggleId] or false)
        
        if toggleId then
            toggleStates[toggleId] = newState
        end
        
        if newState then
            TweenService:Create(ToggleButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(50, 120, 255)}):Play()
            TweenService:Create(ToggleCircle, TweenInfo.new(0.2), {Position = UDim2.new(1, -18, 0.5, -8)}):Play()
        else
            TweenService:Create(ToggleButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(60, 60, 75)}):Play()
            TweenService:Create(ToggleCircle, TweenInfo.new(0.2), {Position = UDim2.new(0, 2, 0.5, -8)}):Play()
        end
        
        callback(newState)
    end)
    
    return Container
end

local function createSlider(parent, text, min, max, default, order, callback)
    local Container = Instance.new("Frame")
    Container.Size = UDim2.new(1, 0, 0, 50)
    Container.BackgroundColor3 = Color3.fromRGB(40, 40, 55)
    Container.LayoutOrder = order
    Container.Parent = parent
    
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 8)
    Corner.Parent = Container
    
    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(1, -20, 0, 20)
    Label.Position = UDim2.new(0, 10, 0, 5)
    Label.BackgroundTransparency = 1
    Label.Text = text .. ": " .. default
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextSize = 13
    Label.Font = Enum.Font.Gotham
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = Container
    
    local SliderBack = Instance.new("Frame")
    SliderBack.Size = UDim2.new(1, -20, 0, 4)
    SliderBack.Position = UDim2.new(0, 10, 1, -15)
    SliderBack.BackgroundColor3 = Color3.fromRGB(60, 60, 75)
    SliderBack.Parent = Container
    
    local SliderCorner = Instance.new("UICorner")
    SliderCorner.CornerRadius = UDim.new(1, 0)
    SliderCorner.Parent = SliderBack
    
    local SliderFill = Instance.new("Frame")
    SliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
    SliderFill.BackgroundColor3 = Color3.fromRGB(50, 120, 255)
    SliderFill.Parent = SliderBack
    
    local FillCorner = Instance.new("UICorner")
    FillCorner.CornerRadius = UDim.new(1, 0)
    FillCorner.Parent = SliderFill
    
    local SliderButton = Instance.new("TextButton")
    SliderButton.Size = UDim2.new(1, 0, 1, 0)
    SliderButton.BackgroundTransparency = 1
    SliderButton.Text = ""
    SliderButton.Parent = SliderBack
    
    local dragging = false
    
    SliderButton.MouseButton1Down:Connect(function()
        if not isAuthorized then return end 
        dragging = true
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if not isAuthorized then return end 
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local pos = math.clamp((input.Position.X - SliderBack.AbsolutePosition.X) / SliderBack.AbsoluteSize.X, 0, 1)
            SliderFill.Size = UDim2.new(pos, 0, 1, 0)
            local value = math.floor(min + (max - min) * pos)
            Label.Text = text .. ": " .. value
            callback(value)
        end
    end)
    
    return Container
end

local function createButton(parent, text, order, callback)
    local Button = Instance.new("TextButton")
    Button.Size = UDim2.new(1, 0, 0, 35)
    Button.BackgroundColor3 = Color3.fromRGB(50, 120, 255)
    Button.Text = text
    Button.TextColor3 = Color3.fromRGB(255, 255, 255)
    Button.TextSize = 13
    Button.Font = Enum.Font.GothamBold
    Button.LayoutOrder = order
    Button.Parent = parent
    
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 8)
    Corner.Parent = Button
    
    Button.MouseButton1Click:Connect(function()
        if not isAuthorized then return end 
        callback()
    end)
    
    return Button
end

local function createColorPicker(parent, text, defaultColor, order, callback)
    local Container = Instance.new("Frame")
    Container.Size = UDim2.new(1, 0, 0, 35)
    Container.BackgroundColor3 = Color3.fromRGB(40, 40, 55)
    Container.LayoutOrder = order
    Container.Parent = parent
    
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 8)
    Corner.Parent = Container
    
    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(1, -80, 1, 0)
    Label.Position = UDim2.new(0, 10, 0, 0)
    Label.BackgroundTransparency = 1
    Label.Text = text
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextSize = 13
    Label.Font = Enum.Font.Gotham
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = Container
    
    local ColorDisplay = Instance.new("Frame")
    ColorDisplay.Size = UDim2.new(0, 60, 0, 25)
    ColorDisplay.Position = UDim2.new(1, -65, 0.5, -12.5)
    ColorDisplay.BackgroundColor3 = defaultColor
    ColorDisplay.Parent = Container
    
    local ColorCorner = Instance.new("UICorner")
    ColorCorner.CornerRadius = UDim.new(0, 6)
    ColorCorner.Parent = ColorDisplay
    
    local ColorButton = Instance.new("TextButton")
    ColorButton.Size = UDim2.new(1, 0, 1, 0)
    ColorButton.BackgroundTransparency = 1
    ColorButton.Text = ""
    ColorButton.Parent = ColorDisplay
    
    local rgbFrame = nil
    local currentR = math.floor(defaultColor.R * 255)
    local currentG = math.floor(defaultColor.G * 255)
    local currentB = math.floor(defaultColor.B * 255)
    
    local clickOutsideConnection = nil

    local function closePicker()
        if rgbFrame then
            if clickOutsideConnection then
                clickOutsideConnection:Disconnect()
                clickOutsideConnection = nil
            end
            rgbFrame:Destroy()
            rgbFrame = nil
        end
    end

    local function checkClickOutside(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 and rgbFrame then
            local mousePos = input.Position
            
            local inRGBFrame = mousePos.X >= rgbFrame.AbsolutePosition.X and mousePos.X <= rgbFrame.AbsolutePosition.X + rgbFrame.AbsoluteSize.X and
                               mousePos.Y >= rgbFrame.AbsolutePosition.Y and mousePos.Y <= rgbFrame.AbsolutePosition.Y + rgbFrame.AbsoluteSize.Y

            if not inRGBFrame then
                closePicker()
            end
        end
    end

    ColorButton.MouseButton1Click:Connect(function()
        if not isAuthorized then return end 

        if rgbFrame then
            closePicker()
        else
            rgbFrame = Instance.new("Frame")
            rgbFrame.Size = UDim2.new(0, 220, 0, 170)
            rgbFrame.Position = UDim2.new(0, 70, 0, -135)
            rgbFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 50)
            rgbFrame.BorderSizePixel = 0
            rgbFrame.ZIndex = 20
            rgbFrame.Parent = Container
            
            local RGBCorner = Instance.new("UICorner")
            RGBCorner.CornerRadius = UDim.new(0, 10)
            RGBCorner.Parent = rgbFrame
            
            local contentHolder = Instance.new("Frame")
            contentHolder.Size = UDim2.new(1, -10, 1, -10)
            contentHolder.Position = UDim2.new(0, 5, 0, 5)
            contentHolder.BackgroundTransparency = 1
            contentHolder.Parent = rgbFrame
            
            local innerLayout = Instance.new("UIListLayout")
            innerLayout.Padding = UDim.new(0, 5)
            innerLayout.SortOrder = Enum.SortOrder.LayoutOrder
            innerLayout.Parent = contentHolder
            
            local function updateColor()
                local newColor = Color3.fromRGB(currentR, currentG, currentB)
                ColorDisplay.BackgroundColor3 = newColor
                callback(newColor)
            end
            
            createSlider(contentHolder, "Red", 0, 255, currentR, 1, function(value)
                currentR = value
                updateColor()
            end)
            
            createSlider(contentHolder, "Green", 0, 255, currentG, 2, function(value)
                currentG = value
                updateColor()
            end)
            
            createSlider(contentHolder, "Blue", 0, 255, currentB, 3, function(value)
                currentB = value
                updateColor()
            end)

            if not clickOutsideConnection then
                clickOutsideConnection = UserInputService.InputBegan:Connect(checkClickOutside)
            end
        end
    end)
    
    return Container
end

local function createDropdown(parent, text, options, order, callback)
    local Container = Instance.new("Frame")
    Container.Size = UDim2.new(1, 0, 0, 35)
    Container.BackgroundColor3 = Color3.fromRGB(40, 40, 55)
    Container.LayoutOrder = order
    Container.Parent = parent
    
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 8)
    Corner.Parent = Container
    
    local Label = Instance.new("TextLabel")
    Label.Size = UDim2.new(1, -70, 1, 0)
    Label.Position = UDim2.new(0, 10, 0, 0)
    Label.BackgroundTransparency = 1
    Label.Text = text .. ": Wybierz..."
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextSize = 13
    Label.Font = Enum.Font.Gotham
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = Container

    local DropdownButton = Instance.new("TextButton")
    DropdownButton.Size = UDim2.new(0, 60, 1, 0)
    DropdownButton.Position = UDim2.new(1, -60, 0, 0)
    DropdownButton.BackgroundColor3 = Color3.fromRGB(50, 120, 255)
    DropdownButton.Text = "▼"
    DropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    DropdownButton.TextSize = 16
    DropdownButton.Font = Enum.Font.GothamBold
    DropdownButton.Parent = Container
    
    local DropdownFrame = Instance.new("Frame")
    DropdownFrame.Name = "DropdownFrame_" .. tostring(order)
    DropdownFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 50)
    DropdownFrame.BorderSizePixel = 0
    DropdownFrame.ZIndex = 15 
    DropdownFrame.Visible = false
    
    local DropdownCorner = Instance.new("UICorner")
    DropdownCorner.CornerRadius = UDim.new(0, 8)
    DropdownCorner.Parent = DropdownFrame

    local Layout = Instance.new("UIListLayout")
    Layout.SortOrder = Enum.SortOrder.LayoutOrder
    Layout.Parent = DropdownFrame
    
    local isOpened = false

    local function createOption(optName)
        local OptionButton = Instance.new("TextButton")
        OptionButton.Size = UDim2.new(1, 0, 0, 30)
        OptionButton.BackgroundColor3 = Color3.fromRGB(35, 35, 50)
        OptionButton.BackgroundTransparency = 0.5
        OptionButton.Text = optName
        OptionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        OptionButton.TextSize = 13
        OptionButton.Font = Enum.Font.Gotham
        OptionButton.Parent = DropdownFrame
        
        OptionButton.MouseEnter:Connect(function()
            OptionButton.BackgroundTransparency = 0
        end)
        OptionButton.MouseLeave:Connect(function()
            OptionButton.BackgroundTransparency = 0.5
        end)
        
        OptionButton.MouseButton1Click:Connect(function()
            Label.Text = text .. ": " .. optName
            callback(optName)
            isOpened = false
            DropdownFrame.Visible = false
            DropdownButton.Text = "▼"
            DropdownFrame.Parent = nil
        end)
    end
    
    for i, opt in ipairs(options) do
        createOption(opt)
    end

    DropdownButton.MouseButton1Click:Connect(function()
        if not isAuthorized then return end
        
        isOpened = not isOpened
        
        if isOpened then
            DropdownFrame.Parent = ContentContainer 
            
            local contentAbsPos = ContentContainer.AbsolutePosition
            local containerAbsPos = Container.AbsolutePosition
            
            local relativeX = containerAbsPos.X - contentAbsPos.X 
            local relativeY = containerAbsPos.Y - contentAbsPos.Y + Container.AbsoluteSize.Y + 5 

            DropdownFrame.Size = UDim2.new(0, Container.AbsoluteSize.X, 0, #options * 30)
            DropdownFrame.Position = UDim2.new(0, relativeX, 0, relativeY)

        else
            DropdownFrame.Parent = nil 
        end
        
        DropdownFrame.Visible = isOpened
        DropdownButton.Text = isOpened and "▲" or "▼"
    end)
    
    local function cleanupDropdown()
        if isOpened then
            isOpened = false
            DropdownButton.Text = "▼"
            DropdownFrame.Parent = nil
        end
    end
    
    Container.AncestryChanged:Connect(function(_, parent)
        if parent == nil or (parent:IsA("ScrollingFrame") and not parent.Visible) then
            cleanupDropdown()
        end
    end)
    
    MainGui:GetPropertyChangedSignal("Enabled"):Connect(function()
        if not MainGui.Enabled then
            cleanupDropdown()
        end
    end)
    
    return Container
end

-- === LOGIKA JUNKYARD ESP ===
local espConnection = nil

local function cleanupESP()
    for vehicle, highlight in pairs(espHighlights) do
        if highlight then highlight:Destroy() end
    end
    espHighlights = {}
end

local function updateJunkyardESP()
    if not isAuthorized then return end 

    if not config.junkyardESP.enabled then
        cleanupESP()
        if espConnection then
            espConnection:Disconnect()
            espConnection = nil
        end
        return
    end

    if not espConnection then
        espConnection = RunService.Heartbeat:Connect(function()
            local vehiclesContainer = workspace:FindFirstChild(JUNKYARD_CONTAINER_NAME)

            if not vehiclesContainer then
                return
            end

            local currentlyVisible = {}

            for _, vehicle in ipairs(vehiclesContainer:GetChildren()) do
                if vehicle:IsA("Model") and vehicle:FindFirstChildOfClass("Part") and vehicle:GetAttribute("Junkyard") == true then
                    
                    currentlyVisible[vehicle] = true
                    
                    if not espHighlights[vehicle] then
                        local highlight = Instance.new("Highlight")
                        highlight.FillColor = config.junkyardESP.color
                        highlight.FillTransparency = config.junkyardESP.transparency
                        highlight.OutlineTransparency = 1
                        highlight.Parent = vehicle 
                        espHighlights[vehicle] = highlight
                    end
                    
                end
            end

            for vehicle, highlight in pairs(espHighlights) do
                if not currentlyVisible[vehicle] then
                    if highlight then highlight:Destroy() end
                    espHighlights[vehicle] = nil
                end
            end
        end)
    end
end

-- Create tabs
tabs.visual = createTab("Visual", 1)
tabs.player = createTab("Player", 2)
tabs.farming = createTab("Farming", 3)
tabs.config = createTab("Config", 4)
tabs.settings = createTab("Settings", 5)
tabs.teleport = createTab("Teleport", 6)

-- VISUAL TAB
createLabel(tabs.visual.content, "Player Highlight Settings", 1)

createToggle(tabs.visual.content, "Enable Player Highlight", 2, function(enabled)
    config.highlight.enabled = enabled
    if enabled then
        local function addHighlightToPlayer(otherPlayer)
            if otherPlayer ~= player and otherPlayer.Character and not highlightObjects[otherPlayer] then
                local highlight = Instance.new("Highlight")
                highlight.FillColor = config.highlight.color
                highlight.FillTransparency = config.highlight.transparency
                highlight.OutlineTransparency = 1
                highlight.Parent = otherPlayer.Character
                highlightObjects[otherPlayer] = highlight
            end
        end

        for _, otherPlayer in pairs(Players:GetPlayers()) do
            addHighlightToPlayer(otherPlayer)
        end
        
        Players.PlayerAdded:Connect(function(otherPlayer)
            otherPlayer.CharacterAdded:Connect(function(char)
                if config.highlight.enabled and otherPlayer ~= player then
                    if highlightObjects[otherPlayer] then
                        highlightObjects[otherPlayer]:Destroy()
                    end
                    local highlight = Instance.new("Highlight")
                    highlight.FillColor = config.highlight.color
                    highlight.FillTransparency = config.highlight.transparency
                    highlight.OutlineTransparency = 1
                    highlight.Parent = char
                    highlightObjects[otherPlayer] = highlight
                end
            end)
            addHighlightToPlayer(otherPlayer)
        end)
    else
        for _, highlight in pairs(highlightObjects) do
            if highlight then
                highlight:Destroy()
            end
        end
        highlightObjects = {}
    end
end, "playerHighlight")

createColorPicker(tabs.visual.content, "Player Highlight Color", config.highlight.color, 3, function(color)
    config.highlight.color = color
    for _, highlight in pairs(highlightObjects) do
        if highlight then
            highlight.FillColor = color
        end
    end
end)

createLabel(tabs.visual.content, "---", 4)
createLabel(tabs.visual.content, "Junkyard Highlight Settings", 5)

createToggle(tabs.visual.content, "Enable Junkyard Highlight", 6, function(enabled)
    config.junkyardESP.enabled = enabled
    updateJunkyardESP()
end, "junkyardESP")

createColorPicker(tabs.visual.content, "Junkyard Highlight Color", config.junkyardESP.color, 7, function(color)
    config.junkyardESP.color = color
    for _, highlight in pairs(espHighlights) do
        if highlight then
            highlight.FillColor = color
        end
    end
end)

-- PLAYER TAB
createLabel(tabs.player.content, "Movement Settings", 1)

createToggle(tabs.player.content, "Enable Fly", 2, function(enabled)
    if not isAuthorized then return end 
    enableFly(enabled) 
end, "fly")

createSlider(tabs.player.content, "Fly Speed", 10, 200, config.fly.speed, 3, function(value)
    flySpeed = value
    config.fly.speed = value
end)

createToggle(tabs.player.content, "Enable Custom Walkspeed", 4, function(enabled)
    if not isAuthorized then return end 
    
    config.walkspeed.enabled = enabled
    if humanoid then 
        if enabled then
            humanoid.WalkSpeed = config.walkspeed.speed
        else
            humanoid.WalkSpeed = 16
        end
    end
end, "walkspeed")

createSlider(tabs.player.content, "Walkspeed", 16, 200, config.walkspeed.speed, 5, function(value)
    config.walkspeed.speed = value
    if config.walkspeed.enabled and humanoid then
        humanoid.WalkSpeed = value
    end
end)

-- FARMING TAB
createLabel(tabs.farming.content, "Auto Farm Settings", 1)

createToggle(tabs.farming.content, "Enable Auto Farm KM", 2, function(enabled)
    if not isAuthorized then return end
    
    config.autoFarm.enabled = enabled
    
    if enabled then
        startAutoFarm()
        TitleText.Text = "Auto Farm Started!"
        wait(2)
        TitleText.Text = "Modern Script Hub - " .. currentUser
    else
        stopAutoFarm()
        TitleText.Text = "Auto Farm Stopped!"
        wait(2)
        TitleText.Text = "Modern Script Hub - " .. currentUser
    end
end, "autoFarm")

createSlider(tabs.farming.content, "Target KM", 10, 1000, config.autoFarm.targetKM, 3, function(value)
    config.autoFarm.targetKM = value
end)

createLabel(tabs.farming.content, "Info: Pojazd będzie jeździł automatycznie", 4)
createLabel(tabs.farming.content, "po powierzchni do osiągnięcia celu KM", 5)

-- CONFIG TAB
createLabel(tabs.config.content, "Configuration Management", 1)
createButton(tabs.config.content, "Save Config", 2, function()
    if not isAuthorized then return end 
    
    local configString = HttpService:JSONEncode(config)
    local success, err = pcall(function()
        writefile("script_config.json", configString)
    end)
    if success then
        TitleText.Text = "Config Saved!"
    else
        TitleText.Text = "Save Failed!"
    end
    wait(2)
    TitleText.Text = "Modern Script Hub - " .. currentUser
end)

createButton(tabs.config.content, "Load Config", 3, function()
    if not isAuthorized then return end 

    local success, loadedConfig
    if isfile("script_config.json") then
        local configString = readfile("script_config.json")
        success, loadedConfig = pcall(function()
            return HttpService:JSONDecode(configString)
        end)
    end
    
    if success and loadedConfig then
        config = loadedConfig
        TitleText.Text = "Config Loaded!"
        
        flySpeed = config.fly.speed
        
        if humanoid then
            if config.walkspeed.enabled then
                humanoid.WalkSpeed = config.walkspeed.speed
            else
                humanoid.WalkSpeed = 16
            end
        end
        
        updateJunkyardESP()
        if keybindButton and config.menuKey and config.menuKey.Name then
             keybindButton.Text = "Change Menu Keybind: " .. config.menuKey.Name
        end
        
    else
        TitleText.Text = "No Config Found!"
    end
    wait(2)
    TitleText.Text = "Modern Script Hub - " .. currentUser
end)

-- SETTINGS TAB
createLabel(tabs.settings.content, "Menu Settings", 1)

keybindButton = createButton(tabs.settings.content, "Change Menu Keybind: " .. config.menuKey.Name, 2, function()
    if not isAuthorized then return end 

    if isChangingKeybind then return end 

    isChangingKeybind = true
    keybindButton.Text = "Press any key..."
    
    ScreenGui.Enabled = true

    local connection 

    local function finishKeybind(newKeyCode)
        if connection then
            connection:Disconnect()
            connection = nil 
        end
        config.menuKey = newKeyCode
        keybindButton.Text = "Change Menu Keybind: " .. newKeyCode.Name
        isChangingKeybind = false
    end

    connection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.UserInputType == Enum.UserInputType.Keyboard then
            
            if input.KeyCode == Enum.KeyCode.LeftControl or input.KeyCode == Enum.KeyCode.RightControl or
               input.KeyCode == Enum.KeyCode.LeftShift or input.KeyCode == Enum.KeyCode.RightShift or
               input.KeyCode == Enum.KeyCode.LeftAlt or input.KeyCode == Enum.KeyCode.RightAlt or
               input.KeyCode == Enum.KeyCode.Unknown then
                
                keybindButton.Text = "Invalid Key! Try again..."
                wait(1.5)
                keybindButton.Text = "Press any key..."
                return
            end
            
            finishKeybind(input.KeyCode)
            
        elseif input.KeyCode == Enum.KeyCode.Escape and isChangingKeybind then
            finishKeybind(config.menuKey)
            
        end
    end)
    
end)

-- TELEPORT TAB
createLabel(tabs.teleport.content, "Location Teleport", 1)

local selectedLocation = nil
local locationNames = {}
for name, _ in pairs(TELEPORT_LOCATIONS) do
    table.insert(locationNames, name)
end
table.sort(locationNames) 

createDropdown(tabs.teleport.content, "Destination", 
    locationNames, 
    2, function(locationName)
    selectedLocation = locationName
end)

createButton(tabs.teleport.content, "Teleport to Selected Location", 3, function()
    if not isAuthorized then return end
    
    local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    
    if hrp and selectedLocation and TELEPORT_LOCATIONS[selectedLocation] then
        
        local destinationCFrame = TELEPORT_LOCATIONS[selectedLocation]
        
        hrp.CFrame = destinationCFrame * CFrame.new(0, 5, 0)
        
        TitleText.Text = "Teleported to: " .. selectedLocation .. "!"
        wait(2)
        TitleText.Text = "Modern Script Hub - " .. currentUser
    else
        TitleText.Text = "Error: Select location!"
        wait(2)
        TitleText.Text = "Modern Script Hub - " .. currentUser
    end
end)

-- Close button functionality
CloseButton.MouseButton1Click:Connect(function()
    if not isAuthorized then return end 
    ScreenGui.Enabled = false
end)

-- Menu toggle
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not isAuthorized then return end 

    if not gameProcessed and not isChangingKeybind and input.KeyCode == config.menuKey then
        ScreenGui.Enabled = not ScreenGui.Enabled
    end
end)

-- Set default tab
wait(0.1)
for _, t in pairs(tabs) do
    t.content.Visible = false
    t.button.BackgroundColor3 = Color3.fromRGB(35, 35, 50)
    t.button.TextColor3 = Color3.fromRGB(200, 200, 200)
end
tabs.visual.content.Visible = true
tabs.visual.button.BackgroundColor3 = Color3.fromRGB(50, 120, 255)
tabs.visual.button.TextColor3 = Color3.fromRGB(255, 255, 255)
currentTab = tabs.visual

-- Parent GUI
ScreenGui.Parent = game:GetService("CoreGui")

-- URUCHOM KEY SYSTEM
createKeyInputGUI()

print("Modern Script Hub initialized! Waiting for authorization...")
